:-use_module(library(sockets)).
:-use_module(library(lists)).
:-use_module(library(codesio)).
:-use_module(library(random)).
:-use_module(library(system)).
:- include('campoBello.pl').

parse_input(initialBoard,Board):-
	set_player('playerX'),
	set_mode_game(1),
	initialBoard(TmpBoard),
	boardToNumbers(TmpBoard,Board).

%valid move

parse_input(validateGame(Board,Source,Destiny,AreaNumber),BoardOut):-
	boardToNumbers(TmpBoard,Board),
	transformPiece(Source,Piece),
	transformPiece(Destiny,PieceDestiny),
	transformArea(Area,AreaNumber),
	transformToCoordinates(RowSource,ColSource,Source),
	transformToCoordinates(RowDestiny,ColDestiny,Destiny),
	validateMove(Area,ColSource,RowSource,ColDestiny,RowDestiny,TmpBoard),
	setPiece(TmpBoard,RowSource,ColSource,'noPiece',TmpBoard2),
	setPiece(TmpBoard2,RowDestiny,ColDestiny,Piece,TmpBoard3),
	PieceDestiny=='noPiece',
	retract(transformPiece(Destiny,PieceDestiny)),
	asserta(transformPiece(Destiny,Piece)),
	printFinalBoard(TmpBoard3),
	boardToNumbers(TmpBoard3,BoardOut).

parse_input(validateGame(Board,Source,Destiny,AreaNumber),BoardOut):-
	boardToNumbers(TmpBoard,Board),
	transformPiece(Source,Piece),
	transformPiece(Destiny,PieceDestiny),
	transformArea(Area,AreaNumber),
	transformToCoordinates(RowSource,ColSource,Source),
	transformToCoordinates(RowDestiny,ColDestiny,Destiny),
	validateMove(Area,ColSource,RowSource,ColDestiny,RowDestiny,TmpBoard),
	setPiece(TmpBoard,RowSource,ColSource,'noPiece',TmpBoard2),
	setPiece(TmpBoard2,RowDestiny,ColDestiny,Piece,TmpBoard3),
	PieceDestiny\='noPiece',
	printFinalBoard(TmpBoard3),
	boardToNumbers(TmpBoard3,BoardOut).

parse_input(removePiece(Board,Piece,Player),BoardOut):-
	boardToNumbers(TmpBoard,Board),
	Player==1,
	transformToCoordinates(Row,Col,Piece),
	checkIfCanRemoveX(Board, Col, Row),
	setPiece(TmpBoard,Row,Col,'noPiece',TmpBoard2),
	printFinalBoard(TmpBoard2),
	boardToNumbers(TmpBoard2,BoardOut).

parse_input(removePiece(Board,Piece,Player),BoardOut):-
	boardToNumbers(TmpBoard,Board),
	Player==2,
	transformToCoordinates(Row,Col,Piece),
	checkIfCanRemoveY(Board, Col, Row),
	setPiece(TmpBoard,Row,Col,'noPiece',TmpBoard2),
	printFinalBoard(TmpBoard2),
	boardToNumbers(TmpBoard2,BoardOut).

parse_input(removePiece(Board,Piece,Player),[]).

%invalid move
parse_input(validateGame(Board,Source,Destiny,AreaNumber),[]).

parse_input(pcMove(Board,Player),[BoardOut,PieceDestinyAux,PieceSourceAux]):-
	boardToNumbers(TmpBoard,Board),
  Player==1,
	write('aqui1'),
	listOfPiecesThatHasPossibleMoveX(FinalList,TmpBoard),
		write('aqui2'),
	length(FinalList,LengthOfList),
		write('aqui3'),
	random(0,LengthOfList,Index),
		write('aqui4'),
	nth0(Index,FinalList,RowSource-ColSource),
		write('aqui5'),
	getPiece(TmpBoard,RowSource,ColSource,Piece),
		write('aqui6'),
	areaOfPiece(RowSource,ColSource,Area),
		write('aqui7'),
	listOfValidDestinyMove(List,RowSource,ColSource,Area,TmpBoard),
			write('aqui8'),
	length(List,LengthOfList2),
				write('aqui9'),
	random(0,LengthOfList2,Index2),
				write('aqui10'),
	nth0(Index2,List,RowDestiny-ColDestiny),
				write('aqui11'),
	validateMovePC(Area,ColSource,RowSource,ColDestiny,RowDestiny,TmpBoard),
				write('aqui12'),
	setPiece(TmpBoard,RowSource,ColSource,'noPiece',TmpBoard2),
				write('aqui13'),
	setPiece(TmpBoard2,RowDestiny,ColDestiny,Piece,TmpBoard3),
				write('aqui14'),
	transformToCoordinates(RowDestiny,ColDestiny,PieceDestinyAux),
	transformToCoordinates(RowSource,ColSource,PieceSourceAux),
	transformPiece(PieceDestinyAux,PieceDestiny),
	transformPiece(PieceSourceAux,PieceSource),
				write('aqui15'),
	PieceDestiny=='noPiece',
				write('aqui16'),
	retract(transformPiece(PieceDestinyAux,PieceDestiny)),
				write('aqui17'),
	asserta(transformPiece(PieceDestinyAux,PieceSource)),
				write('aqui19'),
	printFinalBoard(TmpBoard3),
	boardToNumbers(TmpBoard3,BoardOut).

parse_input(pcMove(Board,Player),[BoardOut,PieceDestinyAux,PieceSourceAux]):-
	boardToNumbers(TmpBoard,Board),
  Player==1,
	write('outro'),
	listOfPiecesThatHasPossibleMoveX(FinalList,TmpBoard),
		write('outro1'),
	length(FinalList,LengthOfList),
		write('outro2'),
	random(0,LengthOfList,Index),
		write('outro3'),
	nth0(Index,FinalList,RowSource-ColSource),
		write('outro4'),
	getPiece(TmpBoard,RowSource,ColSource,Piece),
		write('outro5'),
	areaOfPiece(RowSource,ColSource,Area),
		write('outro6'),
	listOfValidDestinyMove(List,RowSource,ColSource,Area,TmpBoard),
		write('outro7'),
	length(List,LengthOfList2),
		write('outro8'),
	random(0,LengthOfList2,Index2),
		write('outro9'),
	nth0(Index2,List,RowDestiny-ColDestiny),
		write('outro10'),
	validateMovePC(Area,ColSource,RowSource,ColDestiny,RowDestiny,TmpBoard),
		write('outro11'),
	setPiece(TmpBoard,RowSource,ColSource,'noPiece',TmpBoard2),
		write('outro12'),
	setPiece(TmpBoard2,RowDestiny,ColDestiny,Piece,TmpBoard3),
	write('outro13'+List),
	transformToCoordinates(RowDestiny,ColDestiny,PieceDestinyAux),
		write('outro14'),
	transformToCoordinates(RowSource,ColSource,PieceSourceAux),
		write('outro15'),
	transformPiece(PieceDestinyAux,PieceDestiny),
		write('outro16'),
	transformPiece(PieceSourceAux,PieceSource),
	PieceDestiny\='noPiece',
	printFinalBoard(TmpBoard3),
		write('outro17'),
	boardToNumbers(TmpBoard3,BoardOut).


parse_input(pcMove(Board,Player),[BoardOut,PieceDestinyAux,PieceSourceAux]):-
	boardToNumbers(TmpBoard,Board),
	Player==2,
	write('aqui1'),
	listOfPiecesThatHasPossibleMoveY(FinalList,TmpBoard),
		write('aqui2'),
	length(FinalList,LengthOfList),
		write('aqui3'),
	random(0,LengthOfList,Index),
		write('aqui4'),
	nth0(Index,FinalList,RowSource-ColSource),
		write('aqui5'),
	getPiece(TmpBoard,RowSource,ColSource,Piece),
		write('aqui6'),
	areaOfPiece(RowSource,ColSource,Area),
		write('aqui7'),
	listOfValidDestinyMove(List,RowSource,ColSource,Area,TmpBoard),
			write('aqui8'),
	length(List,LengthOfList2),
				write('aqui9'),
	random(0,LengthOfList2,Index2),
				write('aqui10'),
	nth0(Index2,List,RowDestiny-ColDestiny),
				write('aqui11'),
	validateMovePC(Area,ColSource,RowSource,ColDestiny,RowDestiny,TmpBoard),
				write('aqui12'),
	setPiece(TmpBoard,RowSource,ColSource,'noPiece',TmpBoard2),
				write('aqui13'),
	setPiece(TmpBoard2,RowDestiny,ColDestiny,Piece,TmpBoard3),
				write('aqui14'),
	transformToCoordinates(RowDestiny,ColDestiny,PieceDestinyAux),
	transformToCoordinates(RowSource,ColSource,PieceSourceAux),
	transformPiece(PieceDestinyAux,PieceDestiny),
	transformPiece(PieceSourceAux,PieceSource),
				write('aqui15'),
	PieceDestiny=='noPiece',
				write('aqui16'),
	retract(transformPiece(PieceDestinyAux,PieceDestiny)),
				write('aqui17'),
	asserta(transformPiece(PieceDestinyAux,PieceSource)),
				write('aqui19'),
	printFinalBoard(TmpBoard3),
	boardToNumbers(TmpBoard3,BoardOut).

parse_input(pcMove(Board,Player),[BoardOut,PieceDestinyAux,PieceSourceAux]):-
	boardToNumbers(TmpBoard,Board),
	Player==2,
	write('outro'),
	listOfPiecesThatHasPossibleMoveY(FinalList,TmpBoard),
		write('outro1'),
	length(FinalList,LengthOfList),
		write('outro2'),
	random(0,LengthOfList,Index),
		write('outro3'),
	nth0(Index,FinalList,RowSource-ColSource),
		write('outro4'),
	getPiece(TmpBoard,RowSource,ColSource,Piece),
		write('outro5'),
	areaOfPiece(RowSource,ColSource,Area),
		write('outro6'),
	listOfValidDestinyMove(List,RowSource,ColSource,Area,TmpBoard),
		write('outro7'),
	length(List,LengthOfList2),
		write('outro8'),
	random(0,LengthOfList2,Index2),
		write('outro9'),
	nth0(Index2,List,RowDestiny-ColDestiny),
		write('outro10'),
	validateMovePC(Area,ColSource,RowSource,ColDestiny,RowDestiny,TmpBoard),
		write('outro11'),
	setPiece(TmpBoard,RowSource,ColSource,'noPiece',TmpBoard2),
		write('outro12'),
	setPiece(TmpBoard2,RowDestiny,ColDestiny,Piece,TmpBoard3),
		write('outro13'+List),
	transformToCoordinates(RowDestiny,ColDestiny,PieceDestinyAux),
		write('outro14'),
	transformToCoordinates(RowSource,ColSource,PieceSourceAux),
		write('outro15'),
	transformPiece(PieceDestinyAux,PieceDestiny),
		write('outro16'),
	transformPiece(PieceSourceAux,PieceSource),
	PieceDestiny\='noPiece',
	printFinalBoard(TmpBoard3),
		write('outro17'),
	boardToNumbers(TmpBoard3,BoardOut).


  parse_input(pcMove(Board,Player),[]).

	parse_input(pcRemovePiece(Board,Player),[PieceToRemove,BoardOut]):-
		boardToNumbers(TmpBoard,Board),
		Player==1,
		listOfPiecesThatCanRemoveX(TmpBoard,List),
		length(List,LengthOfList),
		random(0,LengthOfList,Index),
		nth0(Index,List,Row-Col),
		transformToCoordinates(Row,Col,PieceToRemove),
		setPiece(TmpBoard,Row,Col,'noPiece',TmpBoard2),
		printFinalBoard(TmpBoard2),
		boardToNumbers(TmpBoard2,BoardOut).

	parse_input(pcRemovePiece(Board,Player),[PieceToRemove,BoardOut]):-
		boardToNumbers(TmpBoard,Board),
		Player==2,
		listOfPiecesThatCanRemoveY(TmpBoard,List),
		length(List,LengthOfList),
		random(0,LengthOfList,Index),
		nth0(Index,List,Row-Col),
		transformToCoordinates(Row,Col,PieceToRemove),
		setPiece(TmpBoard,Row,Col,'noPiece',TmpBoard2),
		printFinalBoard(TmpBoard2),
		boardToNumbers(TmpBoard2,BoardOut).

	parse_input(pcRemovePiece(Board,Player),[]).
